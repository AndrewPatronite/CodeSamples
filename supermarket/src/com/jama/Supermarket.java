/** * Supermarket.java * Andrew Patronite * October 18, 2013 *  * Calculates the total price for a shopping list of items.  Stores new items (added via -newItems command line option) * along with predefined items with regular prices and sales in a MySql database if the -db option is also selected. * The default mode stores new and predefined items in a Hashtable for each individual run. */package com.jama;import java.util.ArrayList;import java.util.Hashtable;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.jama.dao.IProductDao;import com.jama.dao.IProductDaoFactory;import com.jama.dao.ProductDaoFactory;import com.jama.model.Product;import com.jama.model.Sale;import com.jama.model.XForThePriceOfYSale;public class Supermarket{	public final static String PRICE_CHECK = "Price check for item";	public final static String USAGE = "Usage: java Supermarket <ProductsString> [-db] [-newItems<<X1:X1Price[:YfpoZ]>,...,<Xn:XnPrice[:YfpoZ]>>]" +			"\n\tWhere -db uses a database"			+"\n\t-newItems<<X1:X1Price[:YfpoZ]>,...,<Xn:XnPrice[:YfpoZ]>> is a comma separated list of colon separated " +			"triplets of Character item names, int item prices, and optional Y for the price of Z sales.";	private IProductDaoFactory productDaoFactory;	public Supermarket(IProductDaoFactory productDaoFactory)	{		this.productDaoFactory = productDaoFactory;	}	/**	 * Supermarket main	 * @param args: the command line arguments	 * Supports 2 different DAO's to demonstrate Spring dependency injection.  The default stores product data in a Hashtable	 * and the -db option selects database mode which mode uses a MySql database. A createdb.sql script to create	 * the initial database is provided, and hibernate will generate the tables.  The hbm2ddl.auto line in the	 * hibernate.cfg.xml file should be commented out after the first run if data between runs should be persisted.	 * New products with sales can be added via the -newItems command line option	 */	public static void main(String args[])	{		ApplicationContext context = new ClassPathXmlApplicationContext("annotation.xml");		ProductDaoFactory abstractProductDaoFactory = (ProductDaoFactory) context.getBean("productDaoFactory");		//Default DAO Hashtable impelementation:		IProductDaoFactory productDaoFactory = abstractProductDaoFactory.createHashProductDaoFactory();		String cartContents = null;		ArrayList<Product> newProducts = null;		ArrayList<String> optionalArgs = new ArrayList<String>();		switch(args.length)		{			case 1:				cartContents = args[0];				break;			case 2:				cartContents = args[0];				optionalArgs.add(args[1]);				break;			case 3:				cartContents = args[0];				optionalArgs.add(args[1]);				optionalArgs.add(args[2]);				break;			default:				System.out.println(USAGE);				System.exit(1);				break;		}		for(String optionalArgument : optionalArgs)		{			if("-db".equals(optionalArgument))			{				//MySql database DAO implementation:				productDaoFactory = abstractProductDaoFactory.createDbProductDaoFactory();			}			else if(optionalArgument.startsWith("-newItems"))			{				newProducts = parseNewProducts(optionalArgument);			}		}		Supermarket supermarket = new Supermarket(productDaoFactory);		//Set up the predefined list of products A, B, and C		supermarket.initializeRepository(newProducts);				int shoppingTotal = supermarket.checkout(cartContents);				System.out.println("The shopping total for " + cartContents + " is " + shoppingTotal);	}		/**	 * Parses out the products to check out into a quantity of items and rings them up	 * @param items The string of concatenated product characters	 * @return the total price of the items with discounts applied	 */	public int checkout(String items)	{		Hashtable<Character, Integer> shoppingCartQuantities = new Hashtable<Character, Integer>();		//Constructs a Hashtable of product IDs and their quantities		calculateProductQuantities(items, shoppingCartQuantities);		int total = 0;		IProductDao productDao = productDaoFactory.createProductDao();				for (Character productName : shoppingCartQuantities.keySet())		{			//Verify that the product exists, or otherwise notify the user so they can add via command line			Product product = productDao.getProduct(productName);			if(product == null)			{				//price check				System.out.println(PRICE_CHECK + " " + productName);				System.out.println(USAGE);				System.exit(1);			}			int quantity = shoppingCartQuantities.get(productName);			int itemTotal = calculateProductTotal(product, quantity);			total += itemTotal;		}		return total;	}	/**	 * Updates existing products matching the product name, which is a single character	 * or inserts it if it doesn't exist	 * @param productDao: The DAO to interact with the repository	 * @param product: The product to add or update	 */	private void addOrUpdateProduct(IProductDao productDao, Product product)	{		Product existingProduct = productDao.getProduct(product.getProductName());		if(null != existingProduct)		{			existingProduct.setPrice(product.getPrice());			existingProduct.setSale(product.getSale());			productDao.updateProduct(existingProduct);		}		else		{			productDao.insertProduct(product);		}	}	/**	 * Determines the quantity of each item in the shopping cart	 * @param cartContents: The string of product IDs	 * @param shoppingCart: The Hashtable to store the quantities of each product	 */	private void calculateProductQuantities(String cartContents, Hashtable<Character, Integer> shoppingCart)	{		for (Character productName : cartContents.toCharArray())		{			Integer productQuantity = shoppingCart.get(productName);			Integer newProductQuantity = (null == productQuantity) ? 1 : ++productQuantity;			shoppingCart.put(productName, newProductQuantity);		}	}	/**	 * Calculates the total price for a set of a given product, applying sales	 * @param product	 * @return the total	 */	private int calculateProductTotal(Product product, int quantity)	{		int productTotal = 0;		if(null != product.getSale())		{			productTotal = product.getSale().calculateSalePrice(quantity);		}		else		{			productTotal = product.getPrice() * quantity;		}		return productTotal;	}	/**	 * Sets up the predefined A, B, and C products and also stores new products supplied	 * via the command line	 * @param newProducts: The new products parsed from the -newItems command line option	 */	private void initializeRepository(ArrayList<Product> newProducts)	{		IProductDao productDao = productDaoFactory.createProductDao();				Product productA = new Product('A', 20);		Product productB = new Product('B', 50);		Product productC = new Product('C', 30);		productB.setSale(new XForThePriceOfYSale(5, 3, productB));		addOrUpdateProduct(productDao, productA);		addOrUpdateProduct(productDao, productB);		addOrUpdateProduct(productDao, productC);		if(null != newProducts)		{			for(Product newProduct : newProducts)			{				addOrUpdateProduct(productDao, newProduct);			}		}	}		/**	 * Parses out new items to add to the repository	 * @param newItemsArgument: the concatenated string of new products received from the command line	 * @return the list of new or updated products	 */	private static ArrayList<Product> parseNewProducts(String newItemsArgument)	{		ArrayList<Product> newProducts = new ArrayList<Product>();		//Tokenize on ',' to obtain new products 		String newItems = newItemsArgument.substring("-newItems".length());		String items[] = newItems.split(",");				for (String item : items)		{			//Tokenize on ':' to obtain new product name, price, and optionally sale components			String itemComponents[] = item.split(":");			Character newItemName = itemComponents[0].charAt(0);			Integer newItemPrice = Integer.parseInt(itemComponents[1]);			Product newProduct = new Product(newItemName, newItemPrice);						//Product has a sale			if(itemComponents.length == 3)			{				String saleComponents[] = itemComponents[2].split("fpo");				int x = Integer.parseInt(saleComponents[0]);				int y = Integer.parseInt(saleComponents[1]);				Sale newSale = new XForThePriceOfYSale(x, y, newProduct);								newProduct.setSale(newSale);			}			newProducts.add(newProduct);		}		return newProducts;	}}